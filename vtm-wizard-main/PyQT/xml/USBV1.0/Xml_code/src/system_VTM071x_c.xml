<?xml version="1.0" encoding="UTF-8"?>
<template>
    <SystemInit>
    RCC->OSC12_CTRL = 0x8000007F;
    RCC->IRC10_CTRL = 0x4;
    RCC->LDOCTRL = 0x8000C;
    </SystemInit>

    <delay_unsigned_long>
        static void delay(unsigned long time)
    {
        while(time)
        {
            time--; 
        }
    }
    </delay_unsigned_long>
    <delay_uint32_t>
        static void delay(uint32_t time)
    {
        volatile uint32_t delay = time;
        
        while(delay--)
        {
            __nop();
        }
    }
    </delay_uint32_t>

    <SetSysClockToSYS_RCC_AHBCLKCTRL_GPIO>
    RCC->AHBCLKCTRL0_SET = RCC_AHBCLKCTRL_GPIO | RCC_AHBCLKCTRL_IOCON;
    </SetSysClockToSYS_RCC_AHBCLKCTRL_GPIO>
    <SetSysClockToSYS_RCC_AHB_peripheral_GPIO>
    RCC->AHBCLKCTRL0_SET = RCC_AHB_peripheral_GPIO | RCC_APB_Periph_IOCON;
    </SetSysClockToSYS_RCC_AHB_peripheral_GPIO>

    <SetSysClockTo_dRRR>
    delay(3000);
    RCC->USBCLKSEL = RCC_USBCLKSEL_SEL_12M_OSC;
    RCC->USBCLKUEN = 0;
    RCC->USBCLKUEN = 1;
    </SetSysClockTo_dRRR>
    <SetSysClockTo_d3000>
    delay(3000);
    </SetSysClockTo_d3000>
    <SetSysClockTo_RRR>
    RCC->FLASHCLKSEL = RCC_FLASHCLKSEL_SEL_12M_OSC;
    RCC->FLASHCLKUEN = 0;
    RCC->FLASHCLKUEN = 1;
    </SetSysClockTo_RRR>
    <SetSysClockTo_d1000>
    delay(1000);
    </SetSysClockTo_d1000>

    <SystemCoreClockUpdate>
        void SystemCoreClockUpdate(void)
    {
        SetSysClock();
    }
    </SystemCoreClockUpdate>
    <SYSCLK_FREQ_SYSPLL_96MHz>
    #elif defined SYSCLK_FREQ_SYSPLL_96MHz
    uint32_t SystemCoreClock         = SYSCLK_FREQ_SYSPLL_96MHz;  /*!&lt; System Clock Frequency (Core Clock) */
    </SYSCLK_FREQ_SYSPLL_96MHz>
    <IF_SYSCLK_FREQ_SYSPLL_96MHz>
    #elif defined SYSCLK_FREQ_SYSPLL_96MHz
    static void SetSysClockTo96(void);
    </IF_SYSCLK_FREQ_SYSPLL_96MHz>
    <SET_IF_SYSCLK_FREQ_SYSPLL_96MHz>
    #elif defined SYSCLK_FREQ_SYSPLL_96MHz
    SetSysClockTo96();
    </SET_IF_SYSCLK_FREQ_SYSPLL_96MHz>
    <ELIF_IFDEFINED_SYSCLK_FREQ_SYSPLL_96MHz>
    #elif defined SYSCLK_FREQ_SYSPLL_96MHz
/**
  * @brief  Sets System clock frequency to 96MHz and configure HCLK prescalers. 
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo96(void)
{
    uint32_t	timeout = 0;

    RCC->AHBCLKCTRL0_SET = RCC_AHBCLKCTRL_GPIO | RCC_AHBCLKCTRL_IOCON;
    FLASH->ACR = FLASH_ACR_LATENCY_2 | FLASH_ACR_CACHENA;
    RCC->SYSAHBCLKDIV = 1;

#ifdef	SYSCLK_FREQ_IRC	
    /* open sys_pll clk */
    RCC->PDRUNCFG = RCC->PDRUNCFG &amp; 0xFFFFFF77;

    /*set sys_pll clk to 96MHz (12*(4+4))*/
    RCC->SYSPLLCTRL = RCC_SYSPLLCTRL_FORCELOCK | (4 &lt;&lt; 0);
#else
    /* open sys_pll clk */
    RCC->PDRUNCFG = RCC->PDRUNCFG &amp; 0xFFFFFFF6;

    /*set sys_pll clk to 84MHz (12*(4+4))*/
    RCC->OSC12_CTRL = RCC_12OSCCTRL_OSC_EN | (1&lt;&lt;17) | (RCC->OSC12_CTRL &amp; 0xFF); //bit17´ý²âÊÔ
    while(!(RCC->OSC12_CTRL &amp; RCC_12OSCCTRL_OSC_OK))
    {
        if((timeout++) >= 0x8000)
            break;
    }

    {{system_VTM071x_c_SetSysClockTo96_1}}
    
    RCC->SYSPLLCTRL = RCC_SYSPLLCTRL_FORCELOCK | RCC_REF_SEL | (4 &lt;&lt; 0);
    
    /* Use external OSC */
    RCC->USBCTRL |= 0x40000000;
#endif

    while((RCC->SYSPLLSTAT) != RCC_SYSPLLSTAT_LOCK)
    {
        if((timeout++) >= 0x8000)
            break;
    }

    {{system_VTM071x_c_SetSysClockTo96_2}}

    /*switch main clk source to syspll_out*/
    RCC->MAINCLKSEL = 1;
    /*make switch available*/
    RCC->MAINCLKUEN = 0;
    RCC->MAINCLKUEN = 1;
}
    </ELIF_IFDEFINED_SYSCLK_FREQ_SYSPLL_96MHz>



</template>