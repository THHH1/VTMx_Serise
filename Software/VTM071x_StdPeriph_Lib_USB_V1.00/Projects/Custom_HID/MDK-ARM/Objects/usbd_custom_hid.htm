<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\usbd_custom_hid.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\usbd_custom_hid.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Mar 08 16:46:40 2022
<BR><P>
<H3>Maximum Stack Usage =        112 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_IRQHandler &rArr; USB_Isr &rArr; EP_Isr &rArr; DCD_EP_Tx &rArr; CopyDataToEP
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[14]">ACMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">ACMP_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">ACMP_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[13]">ADC_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[15]">BOD_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[16]">BOR_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[1e]">CORDIC_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[18]">DAC_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[11]">DMA_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[12]">GPIO0_TO_GPIO3_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[17]">GPIO4_TO_GPIO6_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from vtm071x_it.o(i.HardFault_Handler) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[c]">I2C0_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[10]">MCPWM_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from vtm071x_it.o(i.NMI_Handler) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from vtm071x_it.o(i.PendSV_Handler) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[6]">RTC_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[d]">SPI0_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[1b]">SPI1_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from vtm071x_it.o(i.SVC_Handler) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from vtm071x_it.o(i.SysTick_Handler) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_vtm071x.o(i.SystemInit) referenced from startup_vtm071x.o(.text)
 <LI><a href="#[e]">TIMER0_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[f]">TIMER1_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[1c]">TIMER2_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[1d]">TIMER3_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[1a]">TSC_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[a]">USART0_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[b]">USART1_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[37]">USBD_DataInStage</a> from usbd_core.o(i.USBD_DataInStage) referenced from usbd_core.o(.data)
 <LI><a href="#[36]">USBD_DataOutStage</a> from usbd_core.o(i.USBD_DataOutStage) referenced from usbd_core.o(.data)
 <LI><a href="#[32]">USBD_HID_DataIn</a> from usbd_custom_hid_core.o(i.USBD_HID_DataIn) referenced from usbd_custom_hid_core.o(.data)
 <LI><a href="#[33]">USBD_HID_DataOut</a> from usbd_custom_hid_core.o(i.USBD_HID_DataOut) referenced from usbd_custom_hid_core.o(.data)
 <LI><a href="#[2f]">USBD_HID_DeInit</a> from usbd_custom_hid_core.o(i.USBD_HID_DeInit) referenced from usbd_custom_hid_core.o(.data)
 <LI><a href="#[31]">USBD_HID_EP0_RxReady</a> from usbd_custom_hid_core.o(i.USBD_HID_EP0_RxReady) referenced from usbd_custom_hid_core.o(.data)
 <LI><a href="#[34]">USBD_HID_GetCfgDesc</a> from usbd_custom_hid_core.o(i.USBD_HID_GetCfgDesc) referenced from usbd_custom_hid_core.o(.data)
 <LI><a href="#[2e]">USBD_HID_Init</a> from usbd_custom_hid_core.o(i.USBD_HID_Init) referenced from usbd_custom_hid_core.o(.data)
 <LI><a href="#[30]">USBD_HID_Setup</a> from usbd_custom_hid_core.o(i.USBD_HID_Setup) referenced from usbd_custom_hid_core.o(.data)
 <LI><a href="#[35]">USBD_HID_Suspend</a> from usbd_custom_hid_core.o(i.USBD_HID_Suspend) referenced from usbd_custom_hid_core.o(.data)
 <LI><a href="#[3a]">USBD_Reset</a> from usbd_core.o(i.USBD_Reset) referenced from usbd_core.o(.data)
 <LI><a href="#[3c]">USBD_Resume</a> from usbd_core.o(i.USBD_Resume) referenced from usbd_core.o(.data)
 <LI><a href="#[39]">USBD_SOF</a> from usbd_core.o(i.USBD_SOF) referenced from usbd_core.o(.data)
 <LI><a href="#[38]">USBD_SetupStage</a> from usbd_core.o(i.USBD_SetupStage) referenced from usbd_core.o(.data)
 <LI><a href="#[3b]">USBD_Suspend</a> from usbd_core.o(i.USBD_Suspend) referenced from usbd_core.o(.data)
 <LI><a href="#[27]">USBD_USR_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ConfigStrDescriptor) referenced from usbd_desc.o(.data)
 <LI><a href="#[2b]">USBD_USR_DeviceConfigured</a> from usbd_usr.o(i.USBD_USR_DeviceConfigured) referenced from usbd_usr.o(.data)
 <LI><a href="#[22]">USBD_USR_DeviceDescriptor</a> from usbd_desc.o(i.USBD_USR_DeviceDescriptor) referenced from usbd_desc.o(.data)
 <LI><a href="#[2a]">USBD_USR_DeviceReset</a> from usbd_usr.o(i.USBD_USR_DeviceReset) referenced from usbd_usr.o(.data)
 <LI><a href="#[2d]">USBD_USR_DeviceResumed</a> from usbd_usr.o(i.USBD_USR_DeviceResumed) referenced from usbd_usr.o(.data)
 <LI><a href="#[2c]">USBD_USR_DeviceSuspended</a> from usbd_usr.o(i.USBD_USR_DeviceSuspended) referenced from usbd_usr.o(.data)
 <LI><a href="#[29]">USBD_USR_Init</a> from usbd_usr.o(i.USBD_USR_Init) referenced from usbd_usr.o(.data)
 <LI><a href="#[28]">USBD_USR_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor) referenced from usbd_desc.o(.data)
 <LI><a href="#[23]">USBD_USR_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_USR_LangIDStrDescriptor) referenced from usbd_desc.o(.data)
 <LI><a href="#[24]">USBD_USR_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor) referenced from usbd_desc.o(.data)
 <LI><a href="#[25]">USBD_USR_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ProductStrDescriptor) referenced from usbd_desc.o(.data)
 <LI><a href="#[26]">USBD_USR_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_USR_SerialStrDescriptor) referenced from usbd_desc.o(.data)
 <LI><a href="#[8]">USB_DMA_IRQHandler</a> from startup_vtm071x.o(.text) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[7]">USB_IRQHandler</a> from vtm071x_it.o(i.USB_IRQHandler) referenced from startup_vtm071x.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_vtm071x.o(.text)
 <LI><a href="#[1f]">main</a> from app.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[a0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3f]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[a2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BOR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>GPIO0_TO_GPIO3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GPIO4_TO_GPIO6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>USB_DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_vtm071x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Suspend
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SendReport
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetCfg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrCfg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Suspend
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SOF
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Resume
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_RxProcess
</UL>

<P><STRONG><a name="[a5]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_PMA_Config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Suspend
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_RxProcess
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_IdleProcess
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[a7]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>ClearEP0SentStall</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.ClearEP0SentStall))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[74]"></a>ClearEP0SetupEnd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.ClearEP0SetupEnd))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[6f]"></a>ClearEPRxPktRdy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_core.o(i.ClearEPRxPktRdy))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_RxProcess
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_IdleProcess
</UL>

<P><STRONG><a name="[48]"></a>ClearEPnRxDataTog</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.ClearEPnRxDataTog))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[77]"></a>ClearEPnRxOverRun</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.ClearEPnRxOverRun))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[49]"></a>ClearEPnRxSentStall</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.ClearEPnRxSentStall))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[54]"></a>ClearEPnTxDataTog</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.ClearEPnTxDataTog))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[46]"></a>ClearEPnTxFrcDataTog</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.ClearEPnTxFrcDataTog))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPnTxType
</UL>

<P><STRONG><a name="[47]"></a>ClearEPnTxSendStall</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.ClearEPnTxSendStall))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[7b]"></a>ClearEPnTxSentStall</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.ClearEPnTxSentStall))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[7c]"></a>ClearEPnTxUnderRun</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.ClearEPnTxUnderRun))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[6e]"></a>CopyDataFromEP</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_core.o(i.CopyDataFromEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CopyDataFromEP
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_RxProcess
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_IdleProcess
</UL>

<P><STRONG><a name="[62]"></a>CopyDataToEP</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_core.o(i.CopyDataToEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CopyDataToEP
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>

<P><STRONG><a name="[8f]"></a>DCD_DevConnect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_dcd.o(i.DCD_DevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[42]"></a>DCD_EP_Close</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_EP_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPnTxAddrAndSize
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPnRxAddrAndSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_DeInit
</UL>

<P><STRONG><a name="[45]"></a>DCD_EP_ClrStall</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPnTxSendStall
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPnTxFrcDataTog
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPnRxSentStall
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPnRxDataTog
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[4a]"></a>DCD_EP_Open</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DCD_EP_Open &rArr; SetEPnTxType
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushEPnTxFIFO
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIntrTxE
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIntrRxE
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIndex
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPnTxType
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPnTxMode
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPnTxMAXP
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPnTxAddrAndSize
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPnRxType
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPnRxMAXP
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPnRxAddrAndSize
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPnTxFIFONotEmpty
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPnRxFIFOFull
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushEPnRxFIFO
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPnTxDataTog
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPnRxDataTog
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[5a]"></a>DCD_EP_PrepareRx</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_PrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_EP_PrepareRx
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[5b]"></a>DCD_EP_SetAddress</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_EP_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Isr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[5d]"></a>DCD_EP_Stall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_EP_Stall
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIndex
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPnTxSendStall
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPnRxSendStall
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEP0SendStall
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[61]"></a>DCD_EP_Tx</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, usb_dcd.o(i.DCD_EP_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCD_EP_Tx &rArr; CopyDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxPktRdy
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIndex
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEP0DataEnd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyDataToEP
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SendReport
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[65]"></a>DCD_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIntrUSBE
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntrUSB
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntrTx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntrRx
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[6b]"></a>DCD_PMA_Config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_PMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_PMA_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[6c]"></a>EP0_IdleProcess</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_dcd_int.o(i.EP0_IdleProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EP0_IdleProcess &rArr; CopyDataFromEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEP0RxCount
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyDataFromEP
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPRxPktRdy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[70]"></a>EP0_RxProcess</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usb_dcd_int.o(i.EP0_RxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EP0_RxProcess &rArr; CopyDataFromEP
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEP0RxCount
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEP0CSR1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyDataFromEP
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPRxPktRdy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[75]"></a>EP0_TxProcess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_dcd_int.o(i.EP0_TxProcess))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[72]"></a>EP_Isr</STRONG> (Thumb, 518 bytes, Stack size 32 bytes, usb_dcd_int.o(i.EP_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EP_Isr &rArr; DCD_EP_Tx &rArr; CopyDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_TxProcess
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_RxProcess
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_IdleProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIndex
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntrTx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntrRx
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPnTxCSR2
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPnTxCSR1
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPnRxCount
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPnRxCSR1
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEP0CSR1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyDataFromEP
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPnTxUnderRun
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPnTxSentStall
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPnTxDataTog
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPnRxSentStall
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPnRxOverRun
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPnRxDataTog
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPRxPktRdy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEP0SetupEnd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEP0SentStall
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Isr
</UL>

<P><STRONG><a name="[59]"></a>FlushEPnRxFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.FlushEPnRxFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[53]"></a>FlushEPnTxFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.FlushEPnTxFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Suspend
</UL>

<P><STRONG><a name="[98]"></a>GPIO_Init</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, vtm071x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BSP_Init
</UL>

<P><STRONG><a name="[71]"></a>GetEP0CSR1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.GetEP0CSR1))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_RxProcess
</UL>

<P><STRONG><a name="[6d]"></a>GetEP0RxCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.GetEP0RxCount))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_RxProcess
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP0_IdleProcess
</UL>

<P><STRONG><a name="[76]"></a>GetEPnRxCSR1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.GetEPnRxCSR1))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[78]"></a>GetEPnRxCount</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_core.o(i.GetEPnRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[58]"></a>GetEPnRxFIFOFull</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.GetEPnRxFIFOFull))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[79]"></a>GetEPnTxCSR1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.GetEPnTxCSR1))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[7a]"></a>GetEPnTxCSR2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.GetEPnTxCSR2))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
</UL>

<P><STRONG><a name="[52]"></a>GetEPnTxFIFONotEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.GetEPnTxFIFONotEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[68]"></a>GetIntrRx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.GetIntrRx))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Isr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[69]"></a>GetIntrTx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.GetIntrTx))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Isr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[67]"></a>GetIntrUSB</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.GetIntrUSB))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Isr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[9d]"></a>GetPower</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.GetPower))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Isr
</UL>

<P><STRONG><a name="[7d]"></a>Get_SerialNum</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_desc.o(i.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vtm071x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vtm071x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>NVIC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BSP_EnableInterrupt
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vtm071x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>RCC_APBPeriphClockCmd</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, vtm071x_rcc.o(i.RCC_APBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BSP_Init
</UL>

<P><STRONG><a name="[9a]"></a>RCC_APBPeriphResetCmd</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, vtm071x_rcc.o(i.RCC_APBPeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BSP_Init
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vtm071x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SetEP0DataEnd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_core.o(i.SetEP0DataEnd))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>

<P><STRONG><a name="[5f]"></a>SetEP0SendStall</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.SetEP0SendStall))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>

<P><STRONG><a name="[44]"></a>SetEPnRxAddrAndSize</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, usb_core.o(i.SetEPnRxAddrAndSize))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>

<P><STRONG><a name="[55]"></a>SetEPnRxMAXP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.SetEPnRxMAXP))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[60]"></a>SetEPnRxSendStall</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.SetEPnRxSendStall))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>

<P><STRONG><a name="[57]"></a>SetEPnRxType</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_core.o(i.SetEPnRxType))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[43]"></a>SetEPnTxAddrAndSize</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, usb_core.o(i.SetEPnTxAddrAndSize))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>

<P><STRONG><a name="[7f]"></a>SetEPnTxFrcDataTog</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.SetEPnTxFrcDataTog))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPnTxType
</UL>

<P><STRONG><a name="[4e]"></a>SetEPnTxMAXP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.SetEPnTxMAXP))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[50]"></a>SetEPnTxMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_core.o(i.SetEPnTxMode))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[5e]"></a>SetEPnTxSendStall</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.SetEPnTxSendStall))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>

<P><STRONG><a name="[51]"></a>SetEPnTxType</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, usb_core.o(i.SetEPnTxType))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SetEPnTxType
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPnTxFrcDataTog
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEPnTxFrcDataTog
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[5c]"></a>SetFADDR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_core.o(i.SetFADDR))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
</UL>

<P><STRONG><a name="[4c]"></a>SetIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.SetIndex))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>

<P><STRONG><a name="[56]"></a>SetIntrRxE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_core.o(i.SetIntrRxE))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[4f]"></a>SetIntrTxE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_core.o(i.SetIntrTxE))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[6a]"></a>SetIntrUSBE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.SetIntrUSBE))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Isr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[66]"></a>SetPower</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.SetPower))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Isr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[63]"></a>SetTxPktRdy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_core.o(i.SetTxPktRdy))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vtm071x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; CopyDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SendReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system_vtm071x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClockTo84
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo84
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>USBD_ClrCfg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ClrCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[83]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[84]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; CopyDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[85]"></a>USBD_CtlError</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_req.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CtlError &rArr; DCD_EP_Stall
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Setup
</UL>

<P><STRONG><a name="[86]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CtlPrepareRx
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Setup
</UL>

<P><STRONG><a name="[87]"></a>USBD_CtlSendData</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CtlSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Setup
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[88]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CtlSendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEP0DataEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[96]"></a>USBD_GetString</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ProductStrDescriptor
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ManufacturerStrDescriptor
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_InterfaceStrDescriptor
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[32]"></a>USBD_HID_DataIn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_custom_hid_core.o(i.USBD_HID_DataIn))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_core.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>USBD_HID_DataOut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_custom_hid_core.o(i.USBD_HID_DataOut))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_core.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>USBD_HID_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_custom_hid_core.o(i.USBD_HID_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_HID_DeInit &rArr; DCD_EP_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_core.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>USBD_HID_EP0_RxReady</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_custom_hid_core.o(i.USBD_HID_EP0_RxReady))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_core.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>USBD_HID_GetCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_custom_hid_core.o(i.USBD_HID_GetCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_core.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>USBD_HID_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbd_custom_hid_core.o(i.USBD_HID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_HID_Init &rArr; DCD_EP_Open &rArr; SetEPnTxType
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_PMA_Config
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_core.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>USBD_HID_SendReport</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_custom_hid_core.o(i.USBD_HID_SendReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; CopyDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[30]"></a>USBD_HID_Setup</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, usbd_custom_hid_core.o(i.USBD_HID_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_HID_Setup &rArr; USBD_CtlSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_core.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>USBD_HID_Suspend</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbd_custom_hid_core.o(i.USBD_HID_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_HID_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushEPnTxFIFO
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_core.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>USBD_Init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_Init &rArr; USB_BSP_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BSP_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BSP_EnableInterrupt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevConnect
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_req.o(i.USBD_ParseSetupRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ParseSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[91]"></a>USBD_SetCfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[93]"></a>USBD_StdDevReq</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, usbd_req.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[95]"></a>USBD_StdEPReq</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[94]"></a>USBD_StdItfReq</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_StdItfReq &rArr; DCD_EP_Stall
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[27]"></a>USBD_USR_ConfigStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>USBD_USR_DeviceConfigured</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceConfigured))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>USBD_USR_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>USBD_USR_DeviceReset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceReset))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>USBD_USR_DeviceResumed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceResumed))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>USBD_USR_DeviceSuspended</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceSuspended))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>USBD_USR_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_USR_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>USBD_USR_InterfaceStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>USBD_USR_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>USBD_USR_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>USBD_USR_ProductStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>USBD_USR_SerialStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_SerialStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>USB_BSP_EnableInterrupt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_BSP_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_BSP_EnableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[8d]"></a>USB_BSP_Init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, usb_bsp.o(i.USB_BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_BSP_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APBPeriphResetCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APBPeriphClockCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[7]"></a>USB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vtm071x_it.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USB_IRQHandler &rArr; USB_Isr &rArr; EP_Isr &rArr; DCD_EP_Tx &rArr; CopyDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_vtm071x.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>USB_Isr</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, usb_dcd_int.o(i.USB_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_Isr &rArr; EP_Isr &rArr; DCD_EP_Tx &rArr; CopyDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Isr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIntrUSBE
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPower
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntrUSB
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntrTx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntrRx
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_custom_hid_core.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Setup
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[aa]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ab]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ac]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9b]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_bsp.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BSP_Init
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = main &rArr; USBD_Init &rArr; USB_BSP_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7e]"></a>IntToUnicode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbd_desc.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[37]"></a>USBD_DataInStage</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_DataInStage &rArr; USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; CopyDataToEP
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>USBD_DataOutStage</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_DataOutStage &rArr; USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>USBD_Reset</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_Reset &rArr; DCD_EP_Open &rArr; SetEPnTxType
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_PMA_Config
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>USBD_Resume</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Resume
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>USBD_SOF</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>USBD_SetupStage</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>USBD_Suspend</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>USBD_GetDescriptor</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[92]"></a>USBD_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_SetConfig &rArr; USBD_SetCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetCfg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrCfg
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[81]"></a>SetSysClockTo84</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, system_vtm071x.o(i.SetSysClockTo84))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClockTo84
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
